CODE:
  import cv2
  import numpy as np
     # Simulate drone camera with webcam
  cap = cv2.VideoCapture(0)
    # Define color range for tracking (e.g., red object)
  lower_color = np.array([0, 120, 70])
  upper_color = np.array([10, 255, 255])
  while True:
    ret, frame = cap.read()
    if not ret:
        break
           # Flip for natural orientation
    frame = cv2.flip(frame, 1)
           # Convert to HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
           # Create a binary mask for the color
    mask = cv2.inRange(hsv, lower_color, upper_color)
             # Morphological operations to remove noise
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
            # Find contours (detected object boundaries)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    for cnt in contours:
        area = cv2.contourArea(cnt)
        if area > 1000:
            x, y, w, h = cv2.boundingRect(cnt)
            center_x = x + w // 2
            center_y = y + h // 2
                      # Draw rectangle and center point
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.circle(frame, (center_x, center_y), 5, (255, 0, 0), -1)
                      # Simulated drone command
            if center_x < 200:
                direction = "Move Left"
            elif center_x > 400:
                direction = "Move Right"
            else:
                direction = "Stay Centered"
           cv2.putText(frame, f'Direction: {direction}', (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                 # Show the frame
    cv2.imshow("Drone Vision", frame)
              # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
